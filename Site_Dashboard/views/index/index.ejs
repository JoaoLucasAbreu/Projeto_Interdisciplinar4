
<div class="card shadow mb-4">
	<!-- Card Header - Dropdown -->
<!-- 	<div
		class="card-header d-flex flex-row align-items-center justify-content-between">
		Earnings Overview
		<div class="dropdown no-arrow">
			<a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
				data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				<i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
			</a>
			<div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
				aria-labelledby="dropdownMenuLink">
				<div class="dropdown-header">Dropdown Header:</div>
				<a class="dropdown-item" href="#">Action</a>
				<a class="dropdown-item" href="#">Another action</a>
				<div class="dropdown-divider"></div>
				<a class="dropdown-item" href="#">Something else here</a>
			</div>
		</div>
	</div> -->
	<div class="card-header">
		<h4 class="card-title">Menores Preços</h4>
	</div>
	<div class="card-body" style="padding-bottom: 0;">
		<div class="row">
<!-- 		<div class="col-md-2 offset-md-6 mb-3 mb-md-0">
				<select class="form-control" id="selectCompanhia" onchange="atualizarGrafico()">
					<option value="GOL">GOL</option>
					<option value="LATAM">LATAM</option>
				</select>
			</div> -->
			<div class="col-md-4 mb-0 offset-md-8">
				<select class="form-control" id="selectDestino" onchange="atualizarGrafico()">
					<% for (let i = 0; i < destinos.length; i++) { %>
						<option value="<%= destinos[i].idVoo %>"><%= destinos[i].destino %></option>
					<% } %>
				</select>
			</div>
		</div>
	</div>
	<!-- Card Body -->
	<div class="card-body" style="padding-top: 0;">
		<div class="chart-area" id="chartContainer"></div>
	</div>
</div>

<div class="row">
	<div class="col-sm-4">
		<div class="card shadow mb-4">
			<!--tabela -->
			<div class="card-header">
				<h4 class="card-title">Top 5 destinos mais caros</h4>
			</div>
			<div class="card-body">
				<div class="chart-area" id="chartPieContainer">
					<% for (let i = 0; i < 5; i++) { %>
						<tr>
							<td>
								<%= maiores[i].destino %>
							</td>
							<br>
							<td>
								<%= maiores[i].destinoSigla %>
							</td>

							<td>
								<%= maiores[i].media %>
							</td>
						</tr>
					<% } %>
				</div>
			</div>
		</div>
	</div>

	<div class="col-sm-8">
		<div class="card shadow mb-4" style="height: 500px;">
			<!--tabela -->
			<div class="card-header">
				<h4 class="card-title">Menores Preços</h4>
			</div>
			<div class="card-body">
				<div class="table-responsive" style="max-height: 500px;">
					<table class="table tablesorter " id="">
						<thead class=" text-primary">
						<tr>
							<th>
								Destino
							</th>
							<th>
								Companhia
							</th>
							<th>
							Horário de Saída
							</th>
							<th>
							Duração
							</th>
							<th>
							Data de Pesquisa
							</th>
							<th class="text-center">
								Preço
							</th>
						</tr>
						</thead>
						<tbody>
						<% for (let i = 0; i < passagens.length; i++) { %>
							<tr>
								<td>
									<%= passagens[i].destino %>
								</td>
								<td>
									<%= passagens[i].companhia %>
								</td>
								<td>
									<%= passagens[i].hSaida %>
								</td>
								<td>
									<%= passagens[i].duracao %>
								</td>
								<td>
									<%= passagens[i].dataPesquisa %>
								</td>
								<td class="text-center">
									<%= passagens[i].preco %>
								</td>
							</tr>
						<% } %>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>


<%- contentFor("scripts") %>

<script src="<%- staticRoot %>/lib/chart.js/chart.min.js"></script>
<script>
	let atualizando = false;

	function number_format(number, decimals, dec_point, thousands_sep) {
		// *     example: number_format(1234.56, 2, ',', ' ');
		// *     return: '1 234,56'
		number = (number + '').replace(',', '').replace(' ', '');
		var n = !isFinite(+number) ? 0 : +number,
			prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
			sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
			dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
			s = '',
			toFixedFix = function(n, prec) {
				var k = Math.pow(10, prec);
				return '' + Math.round(n * k) / k;
			};
		// Fix for IE parseFloat(0.55).toFixed(0) = 0;
		s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
		if (s[0].length > 3) {
			s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
		}
		if ((s[1] || '').length < prec) {
			s[1] = s[1] || '';
			s[1] += new Array(prec - s[1].length + 1).join('0');
		}
		return s.join(dec);
	}

	async function atualizarGrafico() {
		if (atualizando)
			return;

		$("#chartContainer").html('<canvas id="myAreaChart"></canvas>');

		Swal.wait();

		try {
			const response = await fetch("/api/voo/listar?d=" + encodeURIComponent($("#selectDestino").val()))
			if (!response.ok) {
				atualizando = false;
				Swal.error("Ocorreu um erro ao atualizar o gráfico");
				return;
			}
			
			const dados = await response.json();

			atualizando = false;
			Swal.close();

			
			var ctx = document.getElementById("myAreaChart");
			var myLineChart = new Chart(ctx, {
				type: 'line',
				data: {
					labels: dados.labelsGol,
					datasets: [{
						label: 'GOL',
						yAxisID: 'GOL',
						borderColor: 'rgb(252, 82, 3)',
      					backgroundColor: 'rgba(255, 159, 64, 0.2)' ,
						data: dados.valoresGol
						//7, 3, 13
						// 'rgb(255, 159, 64)'
					  }, {
						label: 'LATAM',
						yAxisID:'GOL',
						borderColor: 'rgb(36, 33, 148)',
      					backgroundColor: 'rgba(53, 162, 235, 0.5)',
						data: dados.valoresLatam
					  }]
				},
			
				options: {
					maintainAspectRatio: false,
					layout: {
						padding: {
							left: 10,
							right: 25,
							top: 25,
							bottom: 0
						}
					},
					scales: {
						
						x: {
							time: {
								unit: 'date'
							},
							gridLines: {
								display: false,
								drawBorder: false
							},
							ticks: {
								maxTicksLimit: 10
							}
						},
						GOL:{							
							position: 'left',
							title:{
								display:true,
								text: 'VALOR EM REAIS'
							}
						},
						//y: {
						//	display: false, // MUDEI
						//	ticks: {
						//	
						//		maxTicksLimit: 5,
						//		padding: 10,
						//		//callback: function(value, index, values) {
						//		//	return 'R$' + number_format(value);
						//		//}
						//	},
						//	gridLines: {
						//		color: "rgb(234, 236, 244)",
						//		zeroLineColor: "rgb(234, 236, 244)",
						//		drawBorder: false,
						//		borderDash: [2],
						//		zeroLineBorderDash: [2]
						//	}
						//},
					},
					legend: {
						display: false
					},
					tooltips: {
						backgroundColor: "rgb(255,255,255)",
						bodyFontColor: "#858796",
						titleMarginBottom: 10,
						titleFontColor: '#6e707e',
						titleFontSize: 14,
						borderColor: '#dddfeb',
						borderWidth: 1,
						xPadding: 15,
						yPadding: 15,
						displayColors: false,
						intersect: false,
						mode: 'index',
						caretPadding: 10,
						callbacks: {
							label: function(tooltipItem, chart) {
								var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
								return datasetLabel + ': $' + number_format(tooltipItem.yLabel);
							}
						}
					}
				}
			});

		} catch (ex) {
			atualizando = false;
			Swal.error("Erro de rede ao atualizar o gráfico: " + ex.message);
		}
		//Swal.wait();	
	}

	atualizarGrafico();
</script>


$("#chartPieContainer").html('<canvas id="myPieChart"></canvas>');
try {
		const response = await fetch("/api/voo/top")

		if (!response.ok) {
			//atualizando = false;
			Swal.error("Ocorreu um erro ao atualizar o gráfico maluco");
			return;
		}
		
		const dados2 = await response.json();

		//atualizando = false;
		Swal.close();

		var ctx = document.getElementById("myPieChart");
		var myPieChart = new Chart(ctx, {
			type: 'doughnut',
			  data: {labels: dados2.siglas,
			  datasets: [{
				//label: 'My First Dataset',
				data: dados2.preco,
				backgroundColor: [
				'rgba(255, 159, 64, 0.5)',
				'rgba(255, 205, 86, 0.5)',
				'rgba(75, 192, 192, 0.5)',
				'rgba(54, 162, 235, 0.5)',
				'rgba(153, 102, 255, 0.5)'
				],
				borderColor: [
				'rgb(255, 159, 64)',
				'rgb(255, 205, 86)',
				'rgb(75, 192, 192)',
				'rgb(54, 162, 235)',
				'rgb(153, 102, 255)'
				],
				hoverOffset: 4
			  }]},
			
		});

	} catch (ex) {
		//atualizando = false;
		Swal.error("Erro de rede ao atualizar o gráfico: " + ex.message);
	}